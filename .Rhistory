dados$ethnicity <- factor(dados$ethnicity,
levels = c(1, 2, 3, 4, 5),
labels = c("White","Black","Other",
"Asian or Chinese","Other"))
dados$health_insurance <- factor(dados$health_insurance,
levels = c(1,2,3,4,5,6,7),
labels = c("Public","Private","Public",
"Public", "Other","Other",
"No health insurance"))
dados$employment <- factor(dados$employment,
levels = c(5,6,7,8,9,10),
labels = c("Currently employed","Student",
"Homemaker","Retired","Unable to work",
"Unemployed"))
dados$plan_to_quit_r <- as.factor(dados$plan_to_quit)
dados$plan_to_quit_r <- relevel
dados$age <- as.integer(dados$age)
dados$plan_to_quit_r
table(dados$survey, dados$plan_to_quit)
ggplot(dados, aes(x = age, y = plan_to_quit)) +
geom_boxplot() +
coord_flip()
t.test(age ~ plan_to_quit,
data = dados)
ggplot(dados, aes(x = age, y = factor(plan_to_quit))) +
geom_boxplot() +
coord_flip()
# Variavel dependente (resposta)
table(dados$plan_to_quit)
model <- glm(plan_to_quit_r ~ age + sex + ethnicity
+ employment + health_insurance + survey,
family = binomial(link = "logit"),
data = dados)
## Summary
summary(model)
levels(dados$plan_to_quit_r)
dados$plan_to_quit_r <- relevel(dados$plan_to_quit_r, "0")
dados$age <- as.integer(dados$age)
table(dados$survey, dados$plan_to_quit)
ggplot(dados, aes(x = age, y = factor(plan_to_quit))) +
geom_boxplot() +
coord_flip()
t.test(age ~ plan_to_quit,
data = dados)
# Modeling ----------------------------------------------------------------
# Check variable of interest
table(dados$plan_to_quit)
## Logistic regression
model <- glm(plan_to_quit_r ~
age + sex + ethnicity +
employment + health_insurance + survey,
family = binomial(link = "logit"),
data = dados)
## Summary
summary(model)
logisticPseudoR2s <- function(LogModel) {
dev <- LogModel$deviance
nullDev <- LogModel$null.deviance
modelN <- length(LogModel$fitted.values)
R.l <- 1 - dev / nullDev
R.cs <- 1 - exp( -(nillDev - dev) / modelN)
R.n <- R.cs / (1 - (exp(-(nullDev / modelN))))
cat("Pseudo R^2 for logistic regression \n")
cat("Hosmer and Lemeshow R^2  ", round(R.l, 3), "\n")
cat("Cox and Snell R^2        ", round(R.cs, 3), "\n")
cat("Nagalkerke R^2           ", round(R.n, 3), "\n")
}
## Run regression pseudo R^2
logisticPseudoR2s(model)
logisticPseudoR2s <- function(LogModel) {
dev <- LogModel$deviance
nullDev <- LogModel$null.deviance
modelN <- length(LogModel$fitted.values)
R.l <- 1 - dev / nullDev
R.cs <- 1 - exp( -(nullDev - dev) / modelN)
R.n <- R.cs / (1 - (exp(-(nullDev / modelN))))
cat("Pseudo R^2 for logistic regression \n")
cat("Hosmer and Lemeshow R^2  ", round(R.l, 3), "\n")
cat("Cox and Snell R^2        ", round(R.cs, 3), "\n")
cat("Nagalkerke R^2           ", round(R.n, 3), "\n")
}
## Run regression pseudo R^2
logisticPseudoR2s(model)
logisticChi <- function(model){
modelChi <- model$deviance - model$deviance
chidf <- model$df.residual - model$df.residual
chisq.prob <- 1 - pchisq(modelChi, chidf)
cat("Chi-square          :", round(modelChi, 3))
cat("Degrees of freedom  :", round(chidf, 3))
cat("Chi-square p:       :", round(chisq.prob, 3))
}
logisticChi(model)
logisticChi <- function(model){
modelChi <- model$deviance - model$deviance
chidf <- model$df.residual - model$df.residual
chisq.prob <- 1 - pchisq(modelChi, chidf)
cat("Chi-square          :", modelChi)
cat("Degrees of freedom  :", round(chidf, 3))
cat("Chi-square p:       :", round(chisq.prob, 3))
}
logisticChi(model)
## ChiSquare
logisticChi <- function(model){
modelChi <- model$deviance - model$deviance
chidf <- model$df.residual - model$df.residual
chisq.prob <- 1 - pchisq(modelChi, chidf)
cat("Chi-square          ", modelChi)
cat("Degrees of freedom  ", round(chidf, 3))
cat("Chi-square p:       ", round(chisq.prob, 3))
}
logisticChi(model)
## ChiSquare
logisticChi <- function(model){
modelChi <- model$deviance - model$deviance
chidf <- model$df.residual - model$df.residual
chisq.prob <- 1 - pchisq(modelChi, chidf)
cat("Chi-square          ", modelChi, "\n")
cat("Degrees of freedom  ", chidf, "\n")
cat("Chi-square p:       ", chisq.prob, "\n")
}
logisticChi(model)
model$null.deviance
logisticChi <- function(model){
modelChi <- model$null.deviance - model$deviance
chidf <- model$df.residual - model$df.residual
chisq.prob <- 1 - pchisq(modelChi, chidf)
cat("Chi-square          ", modelChi, "\n")
cat("Degrees of freedom  ", chidf, "\n")
cat("Chi-square p:       ", chisq.prob, "\n")
}
logisticChi(model)
logisticChi <- function(model){
modelChi <- model$null.deviance - model$deviance
chidf <- model$df.null - model$df.residual
chisq.prob <- 1 - pchisq(modelChi, chidf)
cat("Chi-square          ", modelChi, "\n")
cat("Degrees of freedom  ", chidf, "\n")
cat("Chi-square p:       ", chisq.prob, "\n")
}
logisticChi(model)
# Confusion matrix (it requires caret package)
confusionMatrix(dados$plan_to_quit_r,
as.factor(dados$predicted))
# Packages
library(openxlsx)
library(caret)
# Open data
dados <- read.xlsx("~/Downloads/Merged.xlsx")
# Data Processing ------------------------------------------------------------
## Transform numeric into factors
dados$sex <- factor(dados$sex, levels = c(1, 2, 3),
labels = c("Male", "Female", "Other"))
dados$ethnicity <- factor(dados$ethnicity,
levels = c(1, 2, 3, 4, 5),
labels = c("White","Black","Other",
"Asian or Chinese","Other"))
dados$health_insurance <- factor(dados$health_insurance,
levels = c(1,2,3,4,5,6,7),
labels = c("Public","Private","Public",
"Public", "Other","Other",
"No health insurance"))
dados$employment <- factor(dados$employment,
levels = c(5,6,7,8,9,10),
labels = c("Currently employed","Student",
"Homemaker","Retired","Unable to work",
"Unemployed"))
dados$plan_to_quit_r <- as.factor(dados$plan_to_quit)
dados$plan_to_quit_r <- relevel(dados$plan_to_quit_r, "0")
dados$age <- as.integer(dados$age)
# EDA ---------------------------------------------------------------------
table(dados$survey, dados$plan_to_quit)
ggplot(dados, aes(x = age, y = factor(plan_to_quit))) +
geom_boxplot() +
coord_flip()
t.test(age ~ plan_to_quit,
data = dados)
# Modeling ----------------------------------------------------------------
# Check variable of interest
table(dados$plan_to_quit)
## Logistic regression
model <- glm(plan_to_quit_r ~
age + sex + ethnicity +
employment + health_insurance + survey,
family = binomial(link = "logit"),
data = dados)
## Summary
summary(model)
## Regression Outputs
logisticPseudoR2s <- function(LogModel) {
dev <- LogModel$deviance
nullDev <- LogModel$null.deviance
modelN <- length(LogModel$fitted.values)
R.l <- 1 - dev / nullDev
R.cs <- 1 - exp( -(nullDev - dev) / modelN)
R.n <- R.cs / (1 - (exp(-(nullDev / modelN))))
cat("Pseudo R^2 for logistic regression \n")
cat("Hosmer and Lemeshow R^2  ", round(R.l, 3), "\n")
cat("Cox and Snell R^2        ", round(R.cs, 3), "\n")
cat("Nagalkerke R^2           ", round(R.n, 3), "\n")
}
## Run regression pseudo R^2
logisticPseudoR2s(model)
## ChiSquare comparing with baseline
logisticChi <- function(model){
modelChi <- model$null.deviance - model$deviance
chidf <- model$df.null - model$df.residual
chisq.prob <- 1 - pchisq(modelChi, chidf)
cat("Chi-square          ", modelChi, "\n")
cat("Degrees of freedom  ", chidf, "\n")
cat("Chi-square p:       ", chisq.prob, "\n")
}
logisticChi(model)
# Odds Ratio and Confidence Interval
exp(cbind(coef(model), confint(model)))
# Confusion matrix (it requires caret package)
confusionMatrix(dados$plan_to_quit_r,
as.factor(dados$predicted))
levels(dados$plan_to_quit_r)
dados$predicted <- ifelse(model$fitted.values >= .5, "1", "0")
confusionMatrix(dados$plan_to_quit_r,
as.factor(dados$predicted))
dados$standardized.residuals <- rstandard(model)
dados$studentized.residuals <- rstudent(model)
dados$df.beta <- dfbeta(model)
dados$dffit <- dffits(model)
dados$leverage <- hatvalues(model)
dados[, c("leverage", "studentized.residuals", "dfbeta")]
dados[, c("leverage", "studentized.residuals", "df.beta")]
View(dados[, c("leverage", "studentized.residuals", "df.beta")])
hist(dados$df.beta)
library(tidyverse)
library(lubridate)
library(plotly)
library(chron)
data <- read_csv("~/Downloads/calmanessahora_data.csv")
glimpse(data)
data$date <- as.Date(data$date, format = "%d/%m/%Y")
data$minimum <- chron(times = data$minimum)
data$avg_time <- chron(times = data$avg_time)
data$longest <- chron(times = data$longest)
data <- read_csv("~/Downloads/calmanessahora_data.csv")
glimpse(data)
library(tidyverse)
library(lubridate)
library(plotly)
library(chron)
data <- read_csv("~/Downloads/calmanessahora_data.csv")
glimpse(data)
data$date <- as.Date(data$date, format = "%d/%m/%Y")
data$minimum <- chron(times = data$minimum)
data$avg_time <- chron(times = data$avg_time)
data$longest <- chron(times = data$longest)
View(data)
View(data)
View(data)
data <-
data %>%
filter(date <= as.Date("2020-05-26")
)
data_g <-
data %>%
select(date, users, new_users, chats) %>%
gather(-date, key = "key", value = "value")
p1 <-
ggplot(data_g, aes(x = date, y = value, colour = key)) +
geom_line(size = 1.2) +
xlab("") + ylab("Métrica") +
labs(title = "Calmanessahora",
subtitle = "Estatísticas de uso entre 11 de abril e 11 de maio") +
theme_minimal()
ggplotly(p1)
# Average time of chat session
summary(data$avg_time)
summary(data$chats_by_user, na.rm = TRUE)
data %>%
filter(date >= Sys.Date() - 7) %>%
summarise(chats_sum = sum(chats),
users_sum = sum(users),
new_users_sum = sum(new_users),
chats_avg_time = mean(avg_time, na.rm = TRUE),
chats_per_user = chats_sum / users_sum)
data %>%
#filter(date >= Sys.Date() - 7) %>%
summarise(chats_sum = sum(chats),
users_sum = sum(users),
new_users_sum = sum(new_users),
chats_avg_time = mean(avg_time, na.rm = TRUE),
chats_per_user = chats_sum / users_sum)
sum(data$chats)
max(data$date)
setwd("~/github_repos/zetta/training-powerbi-python-r-integration/")
ls
# Importar bibliotecas
library(tidyverse)
library(ggpubr)
# Carregar banco de dados
data <- read_csv("data/insurance.csv")
# Ver estrutura do banco de dados
glimpse(data)
# Treino ggplot2 ----------------------------------------------------------
# Histograma
data %>%
ggplot(aes(x = age, fill = sex)) +
geom_density()
# Boxplot
data %>%
ggplot(aes(x = age, fill = sex)) +
geom_boxplot()
# Diagrama de dispersão
data %>%
ggplot(aes(x = age, y = charges)) +
geom_point()
data %>%
ggplot(aes(x = age, y = charges)) +
geom_point() +
geom_smooth(stat = "lm")
data %>%
ggplot(aes(x = age, y = charges)) +
geom_point() +
geom_smooth(method = "lm")
data %>%
ggplot(aes(x = age, y = charges)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~sex)
data %>%
ggplot(aes(x = age, y = charges, color = sex)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~sex)
data %>%
ggplot(aes(x = age, y = charges, color = sex)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~smoker)
data %>%
ggplot(aes(x = age, y = charges, color = sex)) +
geom_point() +
geom_smooth(charges ~ smoker + bmi + age, method = "lm") +
facet_wrap(~smoker)
data %>%
ggplot(aes(x = age, y = charges, color = sex)) +
geom_point() +
geom_smooth(formula = charges ~ smoker + bmi + age, method = "lm") +
facet_wrap(~smoker)
data %>%
ggplot(aes(x = age, y = charges, color = sex)) +
geom_point() +
geom_smooth(data, formula = charges ~ smoker + bmi + age, method = "lm") +
facet_wrap(~smoker)
data %>%
ggplot(aes(x = age, y = charges, color = sex)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~smoker)
?geom_smooth
data %>%
ggplot(aes(x = age, y = charges, color = sex)) +
geom_point() +
geom_smooth(data = data,
aes(),
method = "lm") +
facet_wrap(~smoker)
data %>%
ggplot(aes(x = age, y = charges)) +
geom_point() +
geom_smooth(data = data,
aes(),
method = "lm") +
facet_wrap(~smoker)
data %>%
ggplot(aes(x = age, fill = sex)) +
geom_density()
data %>%
ggplot(aes(x = age, fill = sex)) +
geom_density(alpha = .3)
data %>%
ggplot(aes(x = age, fill = sex)) +
geom_boxplot()
data %>%
ggplot(aes(x = age, y = charges)) +
geom_point()
# Diagrama de dispersão 2
data %>%
ggplot(aes(x = age, y = charges)) +
geom_point() +
geom_smooth(data = data,
aes(),
method = "lm") +
facet_wrap(~smoker)
data %>%
ggplot(aes(x = age, y = charges)) +
geom_point() +
facet_wrap(~smoker)
data %>%
ggplot(aes(x = age, y = charges)) +
geom_point(alpha = .3) +
facet_wrap(~smoker)
data %>%
ggplot(aes(x = age, y = charges)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm")
facet_wrap(~smoker)
data %>%
ggplot(aes(x = age, y = charges)) +
geom_point(alpha = .3) +
geom_smooth(method = "lm") +
facet_wrap(~smoker)
ggboxplot(data, x = "smoker", y = "charges",
color = "sex",
palette = "npg",
add = "jitter") +
stat_compare_means(method = "t.test")
ggdensity(data, x = "charges",
rug = TRUE,
add = "mean",
color = "bmi", fill = "bmi",
palette = "npg")
ggdensity(data, x = "charges",
rug = TRUE,
add = "mean",
color = "sex", fill = "sex",
palette = "npg")
ggscatter(data, x = "age", y = "charges",
palette = "npg",
size = 3, add = "reg.line")
ggscatter(data, x = "age", y = "charges",
palette = "npg",
size = 1, add = "reg.line")
ggscatter(data, x = "age", y = "charges",color = "smoker",
palette = "npg",
size = 1, add = "reg.line")
# Scatter plot
ggscatter(data, x = "age", y = "charges",color = "smoker",
palette = "npg",
size = 1, add = "reg.line",
conf.int = TRUE)
ggscatter(data, x = "age", y = "charges",color = "smoker",
palette = "npg",
size = 1, add = "reg.line",
conf.int = TRUE,
cor.coef = TRUE)
ggboxplot(data, x = "smoker", y = "charges",
color = "sex",
palette = "npg",
add = "jitter") +
stat_compare_means(method = "t.test")
ggdensity(data, x = "charges",
rug = TRUE,
add = "mean",
color = "sex", fill = "sex",
palette = "npg")
ggscatter(data, x = "age", y = "charges",color = "smoker",
palette = "npg",
size = 1, add = "reg.line",
conf.int = TRUE,
cor.coef = TRUE)
?ggscatter
model <- rpart(data,
charges ~ .,
control = rpart.control(maxdepth = 3,
minsplit = 10)
)
fancyRpartPlot(my_tree,
palettes = "BuGn",
type = 4)
# Importar bibliotecas
library(tidyverse)
library(rpart)
library(rattle)
# Carregar banco de dados
data <- read_csv("data/insurance.csv")
# Ver estrutura do banco de dados
glimpse(data)
# Arvore de regressao -----------------------------------------------------
model <- rpart(data,
charges ~ .,
control = rpart.control(maxdepth = 3,
minsplit = 10)
)
fancyRpartPlot(my_tree,
palettes = "BuGn",
type = 4)
# Importar bibliotecas
library(tidyverse)
library(rpart)
library(rattle)
# Carregar banco de dados
data <- read_csv("data/insurance.csv")
# Ver estrutura do banco de dados
glimpse(data)
# Arvore de regressao -----------------------------------------------------
model <- rpart(data,
charges ~ .,
control = rpart.control(maxdepth = 3,
minsplit = 10)
)
fancyRpartPlot(model,
palettes = "BuGn",
type = 4)
# Carregar banco de dados
data <- read_csv("data/insurance.csv")
# Ver estrutura do banco de dados
glimpse(data)
model <- rpart(data = data,
formula = charges ~ sex + smoker + children + region + bmi,
control = rpart.control(maxdepth = 3,
minsplit = 10)
)
fancyRpartPlot(model,
palettes = "BuGn",
type = 4)
